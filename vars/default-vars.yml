---
# This value specifies a location where all artifacts (SSH key pairs, kubeconfig, 
# terraform state) will be placed when creating your Kubernetes cluster.
working_dir: /tmp

# This value specifies which public cloud provider to deploy resources to.
# acceptable options: aws_ec2, gcp
cloud_provider: aws_ec2

# This value will be added to the names of all provisioned cloud resources
# (instances, firewalls, security groups, etc.)
cloud_prefix: kubeadm-cluster

# This value specifies the number of kubernetes WORKER nodes;
# set to 0 and set kubernetes_allow_pods_on_master to "yes"
# if you desire a single node k8s cluster
num_instances: 2

# This value determines whether or not you allow PODs on the master node.
# If youâ€™d like to create a single node cluster (very helpful 
# for saving on cloud costs), set this value to yes and set num_instances to 0.
kubernetes_allow_pods_on_master: no


# This value determines what cloud instance type will be used for the worker nodes.
# Valid values (and the resulting instance types) are:
#    large:
#        AWS: t3.large
#        GCP: e2-standard-2
#    xlarge:
#        AWS: t3.xlarge
#        GCP: e2-standard-4
instance_size: large

# This value determines the disk size (in GB) of the master node
cloud_master_volume_size: 50

# This value determines the disk size (in GB) of the worker node(s)
cloud_worker_volume_size: 100

# Global kubernetes settings; regardless of cloud provider

# This value determines which version of Kubernetes to provision, in 1.XX format
# A list of all releases can be found here:
# https://kubernetes.io/releases/
kubernetes_version: '1.25'

kubernetes_kubeadm_kubelet_config_file_path: '/etc/kubernetes/kubeadm-kubelet-config.yaml'

kubernetes_pod_network:
  cni: "calico"
  cidr: '192.168.0.0/24'

#AWS-specific parameters

# If you choose to deploy your cluster to AWS, this variable tells the provisioner
# where to look for your local AWS Programmatic credentials. If you already have
# aws-cli installed (not required), these are typically at $HOME/.aws/credentials,
# but you can specify elsewhere. In order to avoid any confusion, use the absolute path.
aws_local_credentials_file: "~/.aws/credentials"

# This value specifies the AWS credentials file profile (for if you have more than one set 
# of AWS programmatic credentials in your credentials file)
aws_credential_profile: "default"

# This value determines what AWS region to provision resources to.
ec2_region: us-east-2

# Hard coded Amazon Machine Image for Ubuntu 20.04
ec2_image_id: ami-00399ec92321828f5 


ec2_wait: yes 
ec2_vpc_subnet: "192.168.0.0/20"
ec2_vpc_cidr: "192.168.0.0/16"
aws_instance_username: ubuntu

#GCP-specific parameters

#Local workstation serviceaccount gcp json file
# If you choose to deploy your cluster to GCP, this variable tells the provisioner
# where to look for your local GCP ServiceAccount json file. 
# In order to avoid any confusion, use the absolute path.
gcp_local_credentials_file: "/Users/mford/.gcp/gcp-creds.json"

#The GCP project referenced in the serviceaccount file
gcp_project: "eloquent-theme-264620"

# These values determine what GCP region/zone to provision resources to.
gcp_region: us-central1
gcp_zone: us-central1-a

# Hard coded GCP Image for Ubuntu 20.04
gcp_disk_image: projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20210623 #Ubuntu 20.04

gcp_vpc_subnet: 192.168.0.0/28
gcp_instance_username: ubuntu
